"""
Debug Plant√£o
============

Este arquivo debuga exatamente o que est√° acontecendo com a fun√ß√£o
determinar_tipo_plantao_automatico.
"""

import pandas as pd
from datetime import date, datetime
from escala_generator import GeradorEscala
from regras_clt import RegrasCLT

def debug_plantao():
    """Debuga a fun√ß√£o determinar_tipo_plantao_automatico."""
    print("=== DEBUG PLANT√ÉO ===")
    
    # Criar dados de teste
    dados_colaboradores = [
        {
            'Nome': 'Ana Costa',
            'Cargo': 'Supervisor',
            'Tipo_Escala': 'I_N',  # √çmpar Noite
            'Turno': 'Noite',
            'Ultimo_Plantao_Mes_Anterior': '30/05/2025',  # Dia 30 (par)
        },
        {
            'Nome': 'Carlos Lima',
            'Cargo': 'Operador',
            'Tipo_Escala': 'P_D',  # Par Dia
            'Turno': 'Dia',
            'Ultimo_Plantao_Mes_Anterior': '29/05/2025',  # Dia 29 (√≠mpar)
        }
    ]
    
    # Criar gerador
    gerador = GeradorEscala(date(2025, 6, 1), date(2025, 6, 30), pd.DataFrame())
    
    print("üß™ Teste detalhado da fun√ß√£o determinar_tipo_plantao_automatico:")
    print()
    
    for colaborador in dados_colaboradores:
        nome = colaborador['Nome']
        tipo_original = colaborador['Tipo_Escala']
        turno = colaborador['Turno']
        ultimo_plantao_str = colaborador['Ultimo_Plantao_Mes_Anterior']
        
        print(f"üë§ {nome}:")
        print(f"   Tipo original: {tipo_original}")
        print(f"   Turno: {turno}")
        print(f"   √öltimo plant√£o: {ultimo_plantao_str}")
        
        # Processar √∫ltimo plant√£o
        ultimo_plantao = None
        if ultimo_plantao_str and ultimo_plantao_str.strip():
            try:
                for formato in ['%d/%m/%Y', '%d-%m-%Y', '%Y-%m-%d']:
                    try:
                        ultimo_plantao = datetime.strptime(ultimo_plantao_str.strip(), formato).date()
                        break
                    except ValueError:
                        continue
            except:
                pass
        
        if ultimo_plantao:
            print(f"   √öltimo plant√£o processado: {ultimo_plantao} (dia {ultimo_plantao.day})")
            print(f"   Dia √© par? {ultimo_plantao.day % 2 == 0}")
            
            # Testar a fun√ß√£o
            tipo_calculado = gerador.regras_clt.determinar_tipo_plantao_automatico(ultimo_plantao, turno)
            print(f"   Tipo calculado: {tipo_calculado}")
            
            # Verificar se deveria mudar
            if tipo_calculado != tipo_original:
                print(f"   ‚úÖ DEVERIA MUDAR: {tipo_original} ‚Üí {tipo_calculado}")
            else:
                print(f"   ‚ùå N√ÉO DEVERIA MUDAR: {tipo_original} = {tipo_calculado}")
        else:
            print(f"   ‚ùå Erro ao processar √∫ltimo plant√£o")
        
        print()
    
    # Testar a l√≥gica manualmente
    print("üîç Teste manual da l√≥gica:")
    print("   Se √∫ltimo plant√£o foi em dia PAR (30), pr√≥ximo deve ser √çMPAR")
    print("   Se √∫ltimo plant√£o foi em dia √çMPAR (29), pr√≥ximo deve ser PAR")
    print()
    
    # Teste Ana Costa
    print("   Ana Costa (I_N, Noite, dia 30):")
    print("   - Dia 30 √© par")
    print("   - Pr√≥ximo deve ser √≠mpar")
    print("   - Turno Noite ‚Üí I_N")
    print("   - Resultado esperado: I_N (n√£o muda)")
    print("   - Resultado atual: P_N (muda)")
    print()
    
    # Teste Carlos Lima
    print("   Carlos Lima (P_D, Dia, dia 29):")
    print("   - Dia 29 √© √≠mpar")
    print("   - Pr√≥ximo deve ser par")
    print("   - Turno Dia ‚Üí P_D")
    print("   - Resultado esperado: P_D (n√£o muda)")
    print("   - Resultado atual: I_D (muda)")
    print()
    
    print("‚ùì PROBLEMA IDENTIFICADO:")
    print("   A l√≥gica est√° invertida! Se o √∫ltimo plant√£o foi em dia par,")
    print("   o pr√≥ximo plant√£o deve ser em dia par tamb√©m (n√£o √≠mpar).")
    print("   E vice-versa.")

if __name__ == "__main__":
    print("INICIANDO DEBUG PLANT√ÉO")
    print("=" * 80)
    
    debug_plantao()
    
    print("\n" + "=" * 80)
    print("‚úÖ DEBUG CONCLU√çDO")
    print("=" * 80) 